{"version":3,"sources":["Stores/createStore.js","Stores/useArtistStore.js","Pages/Advanced.js","Stores/createStoreBasic.js","Stores/useBasicArtistStore.js","Pages/Basic.js","Pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["isArray","Array","reach","queryObject","stringPath","arrayPath","split","reachInside","path","length","parentObject","propertyName","propertyValue","clonedArray","shift","createStore","initialState","listeners","state","setState","newState","target","console","log","window","runCallback","reduce","acc","cur","idx","lastItem","join","unfoldStringPath","forEach","value","cbk","callback","useState","useEffect","push","filter","modern","architect","painter","sculptor","musician","classic","randomElement","arr","Math","floor","random","DisplayComponent","props","useArtistStore","className","DisplayComponentTwo","modernArchitect","modernMusician","modernPainter","InputComponent","setModernArchitect","setModernMusician","setModernPainter","setModern","getRandomArchitect","name","getRandomMusician","getRandomPainter","blankOnes","onClick","Advanced","sections","sectionName","runCallbacks","setNewState","load","section","Basic","Home","modo","setModo","href","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yNAEMA,EAAUC,MAAMD,QAOhBE,EAAQ,SAAAC,GAAW,OAAI,SAAAC,GAC3B,IAAMC,EAAYD,EAAWE,MAAM,KAgBnC,OAdoB,SAAdC,EAAeJ,EAAaK,GAChC,GAAoB,IAAhBA,EAAKC,OACP,MAAQ,CACNC,aAAcP,EACdQ,aAAcH,EAAK,GACnBI,cAAeT,EAAYK,EAAK,KAGpC,IAAMK,EAAW,YAAOL,GAGxB,OAAOD,EADYJ,EADFU,EAAYC,SAEED,GAG1BN,CAAYJ,EAAaE,KCTnBU,EDqBK,SAAAC,GAClB,IAAMC,EAAY,GACZC,EAAQF,EAERG,EAAW,SAAAf,GAAU,OAAI,SAAAgB,GAAa,IAtC7BC,EAsC4B,EACanB,EAAMgB,EAANhB,CAAaE,GAA3DM,EADiC,EACjCA,aAAcC,EADmB,EACnBA,aAAcC,EADK,EACLA,cACpCU,QAAQC,IAAI,YAAaL,GACzBI,QAAQC,IAAI,WAAYH,GAxCR,kBADHC,EA0CAT,IAxCXZ,EAAQqB,IACE,OAAXA,EA6CCX,EAAaC,GAAgBS,EAL7BV,EAAaC,GAAb,2BACKD,EAAaC,IACbS,GAKPE,QAAQC,IAAI,aAAcL,GAE1BM,OAAOP,UAAYA,EACnBO,OAAON,MAAQA,EACfO,EAAYrB,KAGRqB,EAAc,SAAArB,IAhCG,SAAAA,GAEvB,OADkBA,EAAWE,MAAM,KAClBoB,QAAO,SAACC,EAAKC,EAAKC,GACjC,GAAY,IAARA,EAAW,MAAO,CAACD,GACvB,IAAME,EAAWH,EAAIE,EAAM,GAC3B,MAAM,GAAN,mBAAWF,GAAX,CAAgB,CAAC,CAACG,GAAW,CAACF,IAAMG,KAAK,SACxC,KA6BgBC,CAAiB5B,GAIvB6B,SAAQ,SAAAzB,GACjB,IAAM0B,EAAQhC,EAAMgB,EAANhB,CAAaM,GAAb,cACdS,EAAUT,GAAMyB,SAAQ,SAAAE,GAEtBA,EAAID,UAsBV,OAjBiB,SAAA9B,GACf,IAAMgC,EAAWC,qBAAW,GAc5B,OAZAC,qBAAU,WAKR,OAJKrB,EAAUb,KACba,EAAUb,GAAc,IAC1Ba,EAAUb,GAAYmC,KAAKH,GAEpB,WACLnB,EAAUb,GAAca,EAAUb,GAC/BoC,QAAO,SAAAL,GAAG,OAAIA,IAAQC,QAE1B,IAGI,CADOlC,EAAMgB,EAANhB,CAAaE,GAAb,cACCe,EAASf,KC3EbW,CAfD,CACZ0B,OAAS,CACPC,UAAW,qBACXC,QAAS,kBACTC,SAAU,gBACVC,SAAU,aAEZC,QAAS,CACPJ,UAAW,eACXC,QAAS,gBACTC,SAAU,gBACVC,SAAU,uCCVRE,EAAgB,SAAAC,GAAG,OAAIA,EAAIC,KAAKC,MAAMD,KAAKE,SAAWH,EAAIvC,UAE1D2C,EAAmB,SAAAC,GAAU,IAAD,EACJC,EAAe,UADX,mBACzBb,EADyB,UAGhC,OACE,yBAAKc,UAAU,qBACb,uCACA,wCAAa,8BAAOd,EAAOC,YAC3B,uCAAY,8BAAOD,EAAOI,WAC1B,sCAAW,8BAAOJ,EAAOE,YAKzBa,EAAsB,SAAAH,GAAU,IAAD,EACWC,EAAe,oBAD1B,mBAC5BG,EAD4B,aAESH,EAAe,oBAFxB,mBAE5BI,EAF4B,aAGOJ,EAAe,mBAHtB,mBAG5BK,EAH4B,UAKnC,OACE,yBAAKJ,UAAU,qBACb,uCACA,wCAAa,8BAAOE,IACpB,uCAAY,8BAAOC,IACnB,sCAAW,8BAAOC,MAKlBC,EAAiB,WAAO,IAAD,EACmBN,EAAe,oBADlC,mBACpBG,EADoB,KACHI,EADG,OAEiBP,EAAe,mBAFhC,mBAEpBI,EAFoB,KAEJI,EAFI,OAGeR,EAAe,kBAH9B,mBAGpBK,EAHoB,KAGLI,EAHK,OAKCT,EAAe,UALhB,mBAKZU,GALY,WAOrBC,EAAqB,kBAAMlB,EAAc,CAAC,qBAAsB,iBAAkB,eAAgB,cAAcP,QAAO,SAAA0B,GAAI,OAAIA,IAAST,OACxIU,EAAoB,kBAAMpB,EAAc,CAAC,YAAa,OAAQ,qBAAsB,iBAAiBP,QAAO,SAAA0B,GAAI,OAAIA,IAASR,OAC7HU,EAAmB,kBAAMrB,EAAc,CAAC,kBAAmB,gBAAiB,mBAAoB,oBAAiBP,QAAO,SAAA0B,GAAI,OAAIA,IAASP,OACzIjB,EAAYuB,IACZpB,EAAWsB,IACXxB,EAAUyB,IAEVC,EAAY,CAChB3B,UAAW,IAAMuB,IACjBtB,QAAS,IAAMyB,IACfxB,SAAU,SACVC,SAAU,IAAMsB,KAGlB,OACE,yBAAKZ,UAAU,oBACb,4BACEe,QAAS,kBAAMT,EAAmBnB,KAEjCA,GAGH,4BACE4B,QAAS,kBAAMR,EAAkBjB,KAEhCA,GAGH,4BACEyB,QAAS,kBAAMP,EAAiBpB,KAE/BA,GAGH,4BACE2B,QAAS,kBAAMN,EAAUK,KAD3B,iBAyESE,EA/CE,WACf,OACE,6BACE,iCACE,iDACA,qTAGA,kBAAC,EAAD,MACA,6BAAShB,UAAU,mBACjB,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,6CACA,+CAXF,oDAaE,8BAAM,mHASN,kDAtBF,yFAuBqF,0MACnF,8BAAM,0IAxBR,0LAgCE,8BAAM,iK,ECrIM,WAClB,IAAMiB,EAAW,GAEXrD,EAAW,eAACsD,EAAD,uDAAe,IAAf,OAAuB,SAAArD,GACtCoD,EAASC,GAAavD,MAAtB,2BAAmCsD,EAASC,GAAavD,OAAUE,GACnEsD,EAAaD,KAGTC,EAAe,SAAAD,GACnBD,EAASC,GAAaxD,UAAUgB,SAAQ,SAAAG,GACtCA,EAASoC,EAASC,GAAavD,WAwBnC,MAAO,CAbU,SAAAuD,GACf,IAAME,EAActC,qBAAW,GAS/B,OARAC,qBAAU,WAER,OADAkC,EAASC,GAAaxD,UAAUsB,KAAKoC,GAC9B,WACLH,EAASC,GAAaxD,UAAYuD,EAASC,GAAaxD,UACrDuB,QAAO,SAAAJ,GAAQ,OAAIA,IAAauC,QAEpC,IAEI,CAACH,EAASC,GAAavD,MAAOC,EAASsD,KAjBnC,WAAsC,IAArCA,EAAoC,uDAAtB,IAAKzD,EAAiB,uCAChDwD,EAASC,GAAe,CACtBxD,UAAW,GACXC,MAAOF,KCjBkBD,G,mBAAxBuC,E,KAAgBsB,E,KAEvBA,EAAK,SAAU,CACblC,UAAW,qBACXC,QAAS,kBACTC,SAAU,gBACVC,SAAU,cAEZ+B,EAAK,UAAW,CACdlC,UAAW,eACXC,QAAS,gBACTC,SAAU,gBACVC,SAAU,sCAGGS,QCdTP,EAAgB,SAAAC,GAAG,OAAIA,EAAIC,KAAKC,MAAMD,KAAKE,SAAWH,EAAIvC,UAE1D2C,EAAmB,SAAAC,GAAU,IAC1BoB,EAAepB,EAAfoB,YADyB,EAEFnB,EAAemB,GAFb,mBAEzBI,EAFyB,UAGhC,OACE,yBAAKtB,UAAU,qBACb,wCAAckB,GACd,wCAAa,8BAAOI,EAAQnC,YAC5B,uCAAY,8BAAOmC,EAAQhC,WAC3B,sCAAW,8BAAOgC,EAAQlC,YAK1BiB,EAAiB,WAAO,IAAD,EACCN,EAAe,UADhB,mBACpBb,EADoB,KACZuB,EADY,KAGrBtB,EAAYK,EAAc,CAAC,qBAAsB,iBAAkB,eAAgB,cAAcP,QAAO,SAAA0B,GAAI,OAAIA,IAASzB,EAAOC,cAChIG,EAAWE,EAAc,CAAC,YAAa,OAAQ,qBAAsB,iBAAiBP,QAAO,SAAA0B,GAAI,OAAIA,IAASzB,EAAOI,aACrHF,EAAUI,EAAc,CAAC,kBAAmB,gBAAiB,mBAAoB,oBAAiBP,QAAO,SAAA0B,GAAI,OAAIA,IAASzB,EAAOE,YAEvI,OACE,yBAAKY,UAAU,oBACb,4BACEe,QAAS,kBAAMN,EAAU,CAAEtB,gBAE1BA,GAGH,4BACE4B,QAAS,kBAAMN,EAAU,CAAEnB,eAE1BA,GAGH,4BACEyB,QAAS,kBAAMN,EAAU,CAAErB,cAE1BA,KAmFMmC,EA7ED,WACZ,OACE,6BACE,iCACE,+CACA,mLAGA,4FAC6D,uCAD7D,gLAGA,gQAGA,4NAGA,qLAIF,kBAAC,EAAD,MACA,6BAASvB,UAAU,mBACjB,kBAAC,EAAD,CAAkBkB,YAAY,WAC9B,kBAAC,EAAD,CAAkBA,YAAY,WAC9B,kBAAC,EAAD,CAAkBA,YAAY,aAEhC,6CACA,+CA1BF,iMA4BE,8BAAM,6BACH,6CA7BL,gGAgCE,8BAAM,qFAhCR,4EAyCE,kDAzCF,yFA0CqF,6IACnF,8BAAM,6JA3CR,wPAsDE,8BAAM,mUC/EGM,EApBF,WAAO,IAAD,EACO1C,mBAAS,IADhB,mBACV2C,EADU,KACJC,EADI,KAGjB,OACE,6BACE,yEACA,8EAA6C,uBAAGC,KAAK,iOAAR,oEAA7C,gKACA,uMACA,2eACA,mEACA,yBAAK3B,UAAU,oBACb,4BAAQe,QAAS,kBAAMW,EAAQ,WAA/B,aACA,4BAAQX,QAAS,kBAAMW,EAAQ,cAA/B,gBAES,UAATD,EAAmB,kBAAC,EAAD,MAAY,KACtB,aAATA,EAAsB,kBAAC,EAAD,MAAe,O,MCX9BG,MAJf,WACE,OAAO,kBAAC,EAAD,OCMWC,QACW,cAA7B5D,OAAO6D,SAASC,UAEe,UAA7B9D,OAAO6D,SAASC,UAEhB9D,OAAO6D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9E,QAAQ8E,MAAMA,EAAMC,a","file":"static/js/main.cf257bb0.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\n\nconst isArray = Array.isArray\n\nconst isObject = target =>\n  typeof target === 'object'\n  && !isArray(target)\n  && target !== null\n\nconst reach = queryObject => stringPath => {\n  const arrayPath = stringPath.split('.')\n\n  const reachInside = (queryObject, path) => {\n    if (path.length === 1) {\n      return ({\n        parentObject: queryObject,\n        propertyName: path[0],\n        propertyValue: queryObject[path[0]]\n      })\n    }\n    const clonedArray = [...path]\n    const nextProp = clonedArray.shift()\n    const nextObject = queryObject[nextProp]\n    return reachInside(nextObject, clonedArray)\n  }\n\n  return reachInside(queryObject, arrayPath)\n}\n\nconst unfoldStringPath = stringPath => {\n  const arrayPath = stringPath.split('.')\n  return arrayPath.reduce((acc, cur, idx) => {\n    if (idx === 0) return [cur]\n    const lastItem = acc[idx - 1]\n    return [...acc, [[lastItem], [cur]].join('.')]\n  }, [])\n}\n\nconst createStore = initialState => {\n  const listeners = {}\n  const state = initialState\n\n  const setState = stringPath => newState => {\n    const { parentObject, propertyName, propertyValue } = reach(state)(stringPath)\n    console.log('pre-State', state)\n    console.log('newState', newState)\n    if (isObject(propertyValue)) {\n      parentObject[propertyName] = {\n        ...parentObject[propertyName],\n        ...newState\n      }\n    } else {\n      parentObject[propertyName] = newState\n    }\n    console.log('post-State', state)\n\n    window.listeners = listeners\n    window.state = state\n    runCallback(stringPath)\n  }\n\n  const runCallback = stringPath => {\n    // console.log('stringPath', stringPath, 'value', reach(state)(stringPath)['propertyValue'])\n    // listeners[stringPath].forEach(cbk => cbk(reach(state)(stringPath)['propertyValue']))\n    const allPaths = unfoldStringPath(stringPath)\n      // console.log('xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx')\n      // console.log('allPaths', allPaths)\n\n      allPaths.forEach(path => {\n      const value = reach(state)(path)['propertyValue']\n      listeners[path].forEach(cbk => {\n        // console.log('path', path, 'value', value)\n        cbk(value)\n      })\n    })\n  }\n  \n  const useStore = stringPath => {\n    const callback = useState()[1]\n\n    useEffect(() => {\n      if (!listeners[stringPath])\n        listeners[stringPath] = []\n      listeners[stringPath].push(callback)\n\n      return () => {\n        listeners[stringPath] = listeners[stringPath]\n          .filter(cbk => cbk !== callback)\n      }\n    }, [])\n    \n    const value = reach(state)(stringPath)['propertyValue']\n    return [value, setState(stringPath)]\n  }\n  return useStore\n}\n\nexport default createStore","import createStore from './createStore'\n\nconst state = {\n  modern : {\n    architect: 'Frank Lloyd Wright',\n    painter: 'Gerhard Richter',\n    sculptor: 'Paul McCarthy',\n    musician: 'Bob Dylan'\n  },\n  classic: {\n    architect: 'Michelangelo',\n    painter: 'Michaelangelo',\n    sculptor: 'Michaelangelo',\n    musician: 'Frédéric François Chopin'\n  }\n}\n\nexport default createStore(state)","import React from 'react'\nimport useArtistStore from '../Stores/useArtistStore'\n\nconst randomElement = arr => arr[Math.floor(Math.random() * arr.length)]\n\nconst DisplayComponent = props => {\n  const [modern, setModern] = useArtistStore('modern')\n\n  return (\n    <div className='display-container'>\n      <h2>Display</h2>\n      <p>architect <span>{modern.architect}</span></p>\n      <p>musician <span>{modern.musician}</span></p>\n      <p>painter <span>{modern.painter}</span></p>\n    </div>\n  )\n}\n\nconst DisplayComponentTwo = props => {\n  const [modernArchitect, setModernArchitect] = useArtistStore('modern.architect')\n  const [modernMusician, setModernMusician] = useArtistStore('modern.musician')\n  const [modernPainter, setModernPainter] = useArtistStore('modern.painter')\n\n  return (\n    <div className='display-container'>\n      <h2>Display</h2>\n      <p>architect <span>{modernArchitect}</span></p>\n      <p>musician <span>{modernMusician}</span></p>\n      <p>painter <span>{modernPainter}</span></p>\n    </div>\n  )\n}\n\nconst InputComponent = () => {\n  const [modernArchitect, setModernArchitect] = useArtistStore('modern.architect')\n  const [modernMusician, setModernMusician] = useArtistStore('modern.musician')\n  const [modernPainter, setModernPainter] = useArtistStore('modern.painter')\n\n  const [modern, setModern] = useArtistStore('modern')\n\n  const getRandomArchitect = () => randomElement(['Frank Lloyd Wright', 'Oscar Niemeyer', 'Le Corbusier', 'Zaha Hadid'].filter(name => name !== modernArchitect))\n  const getRandomMusician = () => randomElement(['Bob Dylan', 'Enya', 'Loreenna MacKennit', 'Elvis Presley'].filter(name => name !== modernMusician))\n  const getRandomPainter = () => randomElement(['Gerhard Richter', 'Pablo Picasso', 'Vincent Van Gogh', 'Salvador Dalí'].filter(name => name !== modernPainter))\n  const architect = getRandomArchitect()\n  const musician = getRandomMusician()\n  const painter = getRandomPainter()\n\n  const blankOnes = {\n    architect: '!' + getRandomArchitect(),\n    painter: '!' + getRandomPainter(),\n    sculptor: '!' + 'Maria',\n    musician: '!' + getRandomMusician()\n  }\n\n  return (\n    <div className='button-container'>\n      <button\n        onClick={() => setModernArchitect(architect)}\n      >\n        {architect}\n      </button>\n\n      <button\n        onClick={() => setModernMusician(musician)}\n      >\n        {musician}\n      </button>\n\n      <button\n        onClick={() => setModernPainter(painter)}\n      >\n        {painter}\n      </button>\n\n      <button\n        onClick={() => setModern(blankOnes)}\n      >\n        everything!\n      </button>\n    </div>\n  )\n}\n\nconst ShowDeep = () => {\n  const [deepStore, setDeepStore] = useArtistStore('deep1')\n  const changeDeepStore = () => setDeepStore({\n      deep2: {\n        deep3: {\n          deep4: Math.random()\n        }\n      }\n    })\n  return (\n    <div>\n      <p>{deepStore.deep2.deep3.deep4}</p>\n      <button onClick={() => setDeepStore(Math.random())}>Change</button>\n    </div>\n  )\n}\n\nconst Advanced = () => {\n  return (\n    <div>\n      <article>\n        <h1>Store Avançada</h1>\n        <p>\n          Nessa abordagem a store não precisa ser dividida em section, e os componentes podem ser registrar a propriedades específicas da store. Isso deixa o processo mais eficiente, já que os componentes só precisam re-renderizar se propriedades relevantes forem atualizadas.\n        </p>\n        <InputComponent />\n        <section className='display-section'>\n          <DisplayComponent/>\n          <DisplayComponentTwo/>\n        </section>\n        <h2>Como utilizar</h2>\n        <h3>Criando a store</h3>\n        1. Execute createStore paasando o estado inicial.\n        <code><pre>\n          {\n`const state = {\n  name: 'John Doe',\n  ...\n}\nreturn default createStore(state)`\n          }\n        </pre></code>\n        <h3>Utilizando a store</h3>\n        1. Importe o Custom Hook criado e use-o como o useState, exceto por uma diferença: <em>Ao invés de passar o state inicial como argumento, passe a uma string indicando qual propriedade o componente utilizará. Por exemplo, para ouvir a propriedade nome:</em>\n        <code><pre>\n{\n`const MyComponent = () => {\n  const [name, setName] = useMyStore('name')\n  return <div>{name}</div>\n}`}\n        </pre></code>\n        2. Ao declarar a propriedade a ouvir, pode-se usar \".\" para se subscrever a propriedades nested na store. Por exemplo, para ouvir a propriedade cidade, filho de estado, filho de pais:\n        <code><pre>\n          {\n`const MyComponent = () => {\n  const [cidade, setCidade] = useMyStore('pais.estado.cidade')\n  return <div>{cidade}</div>\n}`}\n        </pre></code>\n      </article>\n    </div>\n  )\n}\n\nexport default Advanced","import { useState, useEffect } from 'react'\n\nconst createStore = () => {\n  const sections = {}\n  \n  const setState = (sectionName = '_') => newState => {\n    sections[sectionName].state = { ...sections[sectionName].state, ...newState }\n    runCallbacks(sectionName)\n  }\n\n  const runCallbacks = sectionName => {\n    sections[sectionName].listeners.forEach(callback => {\n      callback(sections[sectionName].state)\n    })\n  }\n\n  const load = (sectionName = '_', initialState) => {\n    sections[sectionName] = {\n      listeners: [],\n      state: initialState\n    }\n  }\n\n  const useStore = sectionName => {\n    const setNewState = useState()[1]\n    useEffect(() => {\n      sections[sectionName].listeners.push(setNewState)\n      return () => {\n        sections[sectionName].listeners = sections[sectionName].listeners\n          .filter(callback => callback !== setNewState)\n      }\n    }, [])\n\n    return [sections[sectionName].state, setState(sectionName)]\n  }\n\n  return [useStore, load]\n}\n\nexport default createStore","import createStore from './createStoreBasic'\n\nconst [useArtistStore, load] = createStore()\n\nload('modern', {\n  architect: 'Frank Lloyd Wright',\n  painter: 'Gerhard Richter',\n  sculptor: 'Paul McCarthy',\n  musician: 'Bob Dylan'\n})\nload('classic', {\n  architect: 'Michelangelo',\n  painter: 'Michaelangelo',\n  sculptor: 'Michaelangelo',\n  musician: 'Frédéric François Chopin'\n})\n\nexport default useArtistStore","import React from 'react'\nimport useArtistStore from '../Stores/useBasicArtistStore'\n\nconst randomElement = arr => arr[Math.floor(Math.random() * arr.length)]\n\nconst DisplayComponent = props => {\n  const {sectionName} = props\n  const [section, setSection] = useArtistStore(sectionName)\n  return (\n    <div className='display-container'>\n      <h2>Display: {sectionName}</h2>\n      <p>architect <span>{section.architect}</span></p>\n      <p>musician <span>{section.musician}</span></p>\n      <p>painter <span>{section.painter}</span></p>\n    </div>\n  )\n}\n\nconst InputComponent = () => {\n  const [modern, setModern] = useArtistStore('modern')\n\n  const architect = randomElement(['Frank Lloyd Wright', 'Oscar Niemeyer', 'Le Corbusier', 'Zaha Hadid'].filter(name => name !== modern.architect))\n  const musician = randomElement(['Bob Dylan', 'Enya', 'Loreenna MacKennit', 'Elvis Presley'].filter(name => name !== modern.musician))\n  const painter = randomElement(['Gerhard Richter', 'Pablo Picasso', 'Vincent Van Gogh', 'Salvador Dalí'].filter(name => name !== modern.painter))\n\n  return (\n    <div className='button-container'>\n      <button\n        onClick={() => setModern({ architect })}\n      >\n        {architect}\n      </button>\n\n      <button\n        onClick={() => setModern({ musician })}\n      >\n        {musician}\n      </button>\n\n      <button\n        onClick={() => setModern({ painter })}\n      >\n        {painter}\n      </button>\n    </div>\n  )\n}\n\nconst Basic = () => {\n  return (\n    <div>\n      <article>\n        <h1>Store Básica</h1>\n        <p>\n          Nesta abordagem, cada store é dividida em sections (o domínio seria uma section, os dados do projeto seriam outra, o histórico outra, etc).\n        </p>\n        <p>\n          O componente se registra não somente numa store, mas a uma <em>section</em> de uma store. O motivo disso é performance: todos os componentes que subscrevem a uma section são renderizados novamente sempre que a section sofrer alteração.\n        </p>\n        <p>\n          Neste exemplo existe uma store (\"useArtistStore\") com duas sections (\"modern\" e \"classic\"). Ao clicar os botões abaixo, você aletarará a section modern, o que causará o rerender dos dois primeiros displays abaixo.\n        </p>\n        <p>\n          Note ques os displays modern estão em branches diferentes do react Component (não são descendentes um do outro), e não estão elevando seu state a nenhum componente ancestral.\n        </p>\n        <p>\n          Você pode utilizar as ferramentas de desenvolvedor e conferir que alteração na section \"modern\" não causam rerender no display \"classic\".\n        </p>\n      </article>\n      <InputComponent />\n      <section className='display-section'>\n        <DisplayComponent sectionName='modern'/>\n        <DisplayComponent sectionName='modern'/>\n        <DisplayComponent sectionName='classic'/>\n      </section>\n      <h2>Como utilizar</h2>\n      <h3>Criando a Store</h3>\n      1. Execute createStore para gerar duas funções: a primeira é o Custom Hook a ser usado pelos componentes, a segunda é uma função de load para carregar as sections da store.\n      <code><pre>\n        {'const [useMyStore, load] = createStore()'}\n      </pre></code>\n      2. Use a função de load, passando uma string como nome e um objecto como state inicial.\n      <code><pre>\n        {\n`load('mySection', {\n  name: 'John Doe',\n  ...\n})`\n        }\n      </pre></code>\n      3. E por fim exporte a função Custom Hook gerada no primeiro passo.\n      <h3>Utilizando a Store</h3>\n      1. Importe o Custom Hook criado e use-o como o useState, exceto por uma diferença: <em>Ao invés de passar o state inicial como argumento, passe a string que indica qual section quer subscrever.</em>\n      <code><pre>\n        {\n`const MyComponent = () => {\n  const [section, setSection] = useMyStore('mySection')\n  return <div>{section.name}</div>\n}`\n        }\n      </pre></code>\n      2. Note que a variável section representa todo o objeto da mySection. Não é possível subscrever a uma propriedade individual.\n      3. Para setar uma propriedade, é necessário passar um objeto contendo a propriedade a ser modificada.\n\n      <code><pre>\n        {\n`const MyComponent = () => {\n  const [section, setSection] = useMyStore('mySection')\n  return (\n    <div>\n      <div>{section.name}</div>\n      <button\n        onCLick={() => setSection({ name: 'Pedro Pedreiro' })}\n      >\n        Alterar Nome\n      </button>\n    </div>\n  )\n}`\n        }\n      </pre></code>\n    </div>\n  )\n}\n\nexport default Basic","import React, { useState } from 'react'\nimport Advanced from './Advanced'\nimport Basic from './Basic'\n\n\nconst Home = () => {\n  const [modo, setModo] = useState('')\n\n  return (\n    <div>\n      <h1>Estudo de persistência com React Hooks</h1>\n      <p>Essas duas variações se baseiam no artigo <a href='https://medium.com/javascript-in-plain-english/state-management-with-react-hooks-no-redux-or-context-api-8b3035ceecf8#:~:text=Sharing%20states&text=To%20work%20a%20solution%20which,functions%20fired%20and%20get%20updated.'>State Management with React Hooks — No Redux or Context API</a> por André Giardi. Especificamente, a ideia de um custom hook capturar a função de set do useState e colocá-la num array persistido por closure.</p>\n      <p>A versão básica divide a store em sections: toda vez que uma section sofrer alteração, todos os componentes subscritos àquela section são atualizados.</p>\n      <p>A versão avançada permite que um componente subscreva a propriedades específicas da store, mas atualmente possui um problema: componentes só respondem a alterações feitas por componentes subscritos no mesmo nível - ou seja, um componente registrado em 'a.b' e outro registrado em 'a' não desencadeiam alteração um no outro, o que é inaceitável. Acredito ser decorrente da Lei dos Hooks, mas não achei a causa do problema.</p>\n      <p>Escolha uma seção para testar.</p>\n      <div className='button-container'>\n        <button onClick={() => setModo('basic')}>básico</button>\n        <button onClick={() => setModo('advanced')}>avançado</button>\n      </div>\n      { modo === 'basic' ? <Basic /> : null }\n      { modo === 'advanced' ? <Advanced /> : null }\n    </div>\n  )\n}\n\nexport default Home","import React from 'react';\nimport Home from './Pages/Home'\n\nimport './Styles/style.css'\n\nfunction App() {\n  return <Home />\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}